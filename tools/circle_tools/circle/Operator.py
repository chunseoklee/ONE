# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Operator(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Operator()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperator(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OperatorBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # Operator
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Operator
    def OpcodeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Operator
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Operator
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def OutputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Operator
    def BuiltinOptionsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Operator
    def CustomOptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def CustomOptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Operator
    def CustomOptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def CustomOptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Operator
    def CustomOptionsFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def MutatingVariableInputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def MutatingVariableInputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # Operator
    def MutatingVariableInputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def MutatingVariableInputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Operator
    def Intermediates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def IntermediatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def IntermediatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def IntermediatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Operator
    def LargeCustomOptionsOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Operator
    def LargeCustomOptionsSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions2Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def OperatorStart(builder):
    builder.StartObject(13)

def Start(builder):
    OperatorStart(builder)

def OperatorAddOpcodeIndex(builder, opcodeIndex):
    builder.PrependUint32Slot(0, opcodeIndex, 0)

def AddOpcodeIndex(builder, opcodeIndex):
    OperatorAddOpcodeIndex(builder, opcodeIndex)

def OperatorAddInputs(builder, inputs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)

def AddInputs(builder, inputs):
    OperatorAddInputs(builder, inputs)

def OperatorStartInputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInputsVector(builder, numElems: int) -> int:
    return OperatorStartInputsVector(builder, numElems)

def OperatorAddOutputs(builder, outputs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)

def AddOutputs(builder, outputs):
    OperatorAddOutputs(builder, outputs)

def OperatorStartOutputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutputsVector(builder, numElems: int) -> int:
    return OperatorStartOutputsVector(builder, numElems)

def OperatorAddBuiltinOptionsType(builder, builtinOptionsType):
    builder.PrependUint8Slot(3, builtinOptionsType, 0)

def AddBuiltinOptionsType(builder, builtinOptionsType):
    OperatorAddBuiltinOptionsType(builder, builtinOptionsType)

def OperatorAddBuiltinOptions(builder, builtinOptions):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions), 0)

def AddBuiltinOptions(builder, builtinOptions):
    OperatorAddBuiltinOptions(builder, builtinOptions)

def OperatorAddCustomOptions(builder, customOptions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(customOptions), 0)

def AddCustomOptions(builder, customOptions):
    OperatorAddCustomOptions(builder, customOptions)

def OperatorStartCustomOptionsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartCustomOptionsVector(builder, numElems: int) -> int:
    return OperatorStartCustomOptionsVector(builder, numElems)

def OperatorAddCustomOptionsFormat(builder, customOptionsFormat):
    builder.PrependInt8Slot(6, customOptionsFormat, 0)

def AddCustomOptionsFormat(builder, customOptionsFormat):
    OperatorAddCustomOptionsFormat(builder, customOptionsFormat)

def OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mutatingVariableInputs), 0)

def AddMutatingVariableInputs(builder, mutatingVariableInputs):
    OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs)

def OperatorStartMutatingVariableInputsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartMutatingVariableInputsVector(builder, numElems: int) -> int:
    return OperatorStartMutatingVariableInputsVector(builder, numElems)

def OperatorAddIntermediates(builder, intermediates):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(intermediates), 0)

def AddIntermediates(builder, intermediates):
    OperatorAddIntermediates(builder, intermediates)

def OperatorStartIntermediatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntermediatesVector(builder, numElems: int) -> int:
    return OperatorStartIntermediatesVector(builder, numElems)

def OperatorAddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset):
    builder.PrependUint64Slot(9, largeCustomOptionsOffset, 0)

def AddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset):
    OperatorAddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset)

def OperatorAddLargeCustomOptionsSize(builder, largeCustomOptionsSize):
    builder.PrependUint64Slot(10, largeCustomOptionsSize, 0)

def AddLargeCustomOptionsSize(builder, largeCustomOptionsSize):
    OperatorAddLargeCustomOptionsSize(builder, largeCustomOptionsSize)

def OperatorAddBuiltinOptions2Type(builder, builtinOptions2Type):
    builder.PrependUint8Slot(11, builtinOptions2Type, 0)

def AddBuiltinOptions2Type(builder, builtinOptions2Type):
    OperatorAddBuiltinOptions2Type(builder, builtinOptions2Type)

def OperatorAddBuiltinOptions2(builder, builtinOptions2):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions2), 0)

def AddBuiltinOptions2(builder, builtinOptions2):
    OperatorAddBuiltinOptions2(builder, builtinOptions2)

def OperatorEnd(builder):
    return builder.EndObject()

def End(builder):
    return OperatorEnd(builder)

import circle.ATan2Options
import circle.AbsOptions
import circle.AddNOptions
import circle.AddOptions
import circle.ArgMaxOptions
import circle.ArgMinOptions
import circle.AssignVariableOptions
import circle.BCQFullyConnectedOptions
import circle.BCQGatherOptions
import circle.BatchMatMulOptions
import circle.BatchToSpaceNDOptions
import circle.BidirectionalSequenceLSTMOptions
import circle.BidirectionalSequenceRNNOptions
import circle.BitcastOptions
import circle.BitwiseXorOptions
import circle.BroadcastToOptions
import circle.BucketizeOptions
import circle.BuiltinOptions
import circle.BuiltinOptions2
import circle.CallOnceOptions
import circle.CallOptions
import circle.CastOptions
import circle.ConcatEmbeddingsOptions
import circle.ConcatenationOptions
import circle.Conv2DOptions
import circle.Conv3DOptions
import circle.CosOptions
import circle.CumsumOptions
import circle.DensifyOptions
import circle.DepthToSpaceOptions
import circle.DepthwiseConv2DOptions
import circle.DequantizeOptions
import circle.DilateOptions
import circle.DivOptions
import circle.DynamicUpdateSliceOptions
import circle.EmbeddingLookupSparseOptions
import circle.EqualOptions
import circle.ExpOptions
import circle.ExpandDimsOptions
import circle.FakeQuantOptions
import circle.FillOptions
import circle.FloorDivOptions
import circle.FloorModOptions
import circle.FullyConnectedOptions
import circle.GRUOptions
import circle.GatherNdOptions
import circle.GatherOptions
import circle.GeluOptions
import circle.GreaterEqualOptions
import circle.GreaterOptions
import circle.HardSwishOptions
import circle.HashtableFindOptions
import circle.HashtableImportOptions
import circle.HashtableOptions
import circle.HashtableSizeOptions
import circle.IfOptions
import circle.InstanceNormOptions
import circle.L2NormOptions
import circle.LSHProjectionOptions
import circle.LSTMOptions
import circle.LeakyReluOptions
import circle.LessEqualOptions
import circle.LessOptions
import circle.LocalResponseNormalizationOptions
import circle.LogSoftmaxOptions
import circle.LogicalAndOptions
import circle.LogicalNotOptions
import circle.LogicalOrOptions
import circle.MatrixDiagOptions
import circle.MatrixSetDiagOptions
import circle.MaximumMinimumOptions
import circle.MirrorPadOptions
import circle.MulOptions
import circle.NegOptions
import circle.NonMaxSuppressionV4Options
import circle.NonMaxSuppressionV5Options
import circle.NotEqualOptions
import circle.OneHotOptions
import circle.PackOptions
import circle.PadOptions
import circle.PadV2Options
import circle.Pool2DOptions
import circle.PowOptions
import circle.QuantizeOptions
import circle.RNNOptions
import circle.RandomOptions
import circle.RangeOptions
import circle.RankOptions
import circle.ReadVariableOptions
import circle.ReduceWindowOptions
import circle.ReducerOptions
import circle.ReshapeOptions
import circle.ResizeBilinearOptions
import circle.ResizeNearestNeighborOptions
import circle.ReverseSequenceOptions
import circle.ReverseV2Options
import circle.Rfft2dOptions
import circle.RightShiftOptions
import circle.RmsNormOptions
import circle.RoPEOptions
import circle.SVDFOptions
import circle.ScatterNdOptions
import circle.SegmentSumOptions
import circle.SelectOptions
import circle.SelectV2Options
import circle.SequenceRNNOptions
import circle.ShapeOptions
import circle.SignOptions
import circle.SkipGramOptions
import circle.SliceOptions
import circle.SoftmaxOptions
import circle.SpaceToBatchNDOptions
import circle.SpaceToDepthOptions
import circle.SparseToDenseOptions
import circle.SplitOptions
import circle.SplitVOptions
import circle.SquareOptions
import circle.SquaredDifferenceOptions
import circle.SqueezeOptions
import circle.StablehloBroadcastInDimOptions
import circle.StablehloCompareOptions
import circle.StablehloConcatenateOptions
import circle.StablehloConvolutionOptions
import circle.StablehloCustomCallOptions
import circle.StablehloDotGeneralOptions
import circle.StablehloDynamicSliceOptions
import circle.StablehloGatherOptions
import circle.StablehloIotaOptions
import circle.StablehloPadOptions
import circle.StablehloReduceOptions
import circle.StablehloReduceWindowOptions
import circle.StablehloRngBitGeneratorOptions
import circle.StablehloScatterOptions
import circle.StablehloSliceOptions
import circle.StablehloSortOptions
import circle.StablehloTransposeOptions
import circle.StablehloWhileOptions
import circle.StridedSliceOptions
import circle.SubOptions
import circle.TileOptions
import circle.TopKV2Options
import circle.TransposeConvOptions
import circle.TransposeOptions
import circle.UnidirectionalSequenceLSTMOptions
import circle.UniqueOptions
import circle.UnpackOptions
import circle.UnsortedSegmentMaxOptions
import circle.UnsortedSegmentMinOptions
import circle.UnsortedSegmentProdOptions
import circle.UnsortedSegmentSumOptions
import circle.VarHandleOptions
import circle.WhereOptions
import circle.WhileOptions
import circle.ZerosLikeOptions
try:
    from typing import List, Union
except:
    pass

class OperatorT(object):

    # OperatorT
    def __init__(self):
        self.opcodeIndex = 0  # type: int
        self.inputs = None  # type: List[int]
        self.outputs = None  # type: List[int]
        self.builtinOptionsType = 0  # type: int
        self.builtinOptions = None  # type: Union[None, circle.Conv2DOptions.Conv2DOptionsT, circle.DepthwiseConv2DOptions.DepthwiseConv2DOptionsT, circle.ConcatEmbeddingsOptions.ConcatEmbeddingsOptionsT, circle.LSHProjectionOptions.LSHProjectionOptionsT, circle.Pool2DOptions.Pool2DOptionsT, circle.SVDFOptions.SVDFOptionsT, circle.RNNOptions.RNNOptionsT, circle.FullyConnectedOptions.FullyConnectedOptionsT, circle.SoftmaxOptions.SoftmaxOptionsT, circle.ConcatenationOptions.ConcatenationOptionsT, circle.AddOptions.AddOptionsT, circle.L2NormOptions.L2NormOptionsT, circle.LocalResponseNormalizationOptions.LocalResponseNormalizationOptionsT, circle.LSTMOptions.LSTMOptionsT, circle.ResizeBilinearOptions.ResizeBilinearOptionsT, circle.CallOptions.CallOptionsT, circle.ReshapeOptions.ReshapeOptionsT, circle.SkipGramOptions.SkipGramOptionsT, circle.SpaceToDepthOptions.SpaceToDepthOptionsT, circle.EmbeddingLookupSparseOptions.EmbeddingLookupSparseOptionsT, circle.MulOptions.MulOptionsT, circle.PadOptions.PadOptionsT, circle.GatherOptions.GatherOptionsT, circle.BatchToSpaceNDOptions.BatchToSpaceNDOptionsT, circle.SpaceToBatchNDOptions.SpaceToBatchNDOptionsT, circle.TransposeOptions.TransposeOptionsT, circle.ReducerOptions.ReducerOptionsT, circle.SubOptions.SubOptionsT, circle.DivOptions.DivOptionsT, circle.SqueezeOptions.SqueezeOptionsT, circle.SequenceRNNOptions.SequenceRNNOptionsT, circle.StridedSliceOptions.StridedSliceOptionsT, circle.ExpOptions.ExpOptionsT, circle.TopKV2Options.TopKV2OptionsT, circle.SplitOptions.SplitOptionsT, circle.LogSoftmaxOptions.LogSoftmaxOptionsT, circle.CastOptions.CastOptionsT, circle.DequantizeOptions.DequantizeOptionsT, circle.MaximumMinimumOptions.MaximumMinimumOptionsT, circle.ArgMaxOptions.ArgMaxOptionsT, circle.LessOptions.LessOptionsT, circle.NegOptions.NegOptionsT, circle.PadV2Options.PadV2OptionsT, circle.GreaterOptions.GreaterOptionsT, circle.GreaterEqualOptions.GreaterEqualOptionsT, circle.LessEqualOptions.LessEqualOptionsT, circle.SelectOptions.SelectOptionsT, circle.SliceOptions.SliceOptionsT, circle.TransposeConvOptions.TransposeConvOptionsT, circle.SparseToDenseOptions.SparseToDenseOptionsT, circle.TileOptions.TileOptionsT, circle.ExpandDimsOptions.ExpandDimsOptionsT, circle.EqualOptions.EqualOptionsT, circle.NotEqualOptions.NotEqualOptionsT, circle.ShapeOptions.ShapeOptionsT, circle.PowOptions.PowOptionsT, circle.ArgMinOptions.ArgMinOptionsT, circle.FakeQuantOptions.FakeQuantOptionsT, circle.PackOptions.PackOptionsT, circle.LogicalOrOptions.LogicalOrOptionsT, circle.OneHotOptions.OneHotOptionsT, circle.LogicalAndOptions.LogicalAndOptionsT, circle.LogicalNotOptions.LogicalNotOptionsT, circle.UnpackOptions.UnpackOptionsT, circle.FloorDivOptions.FloorDivOptionsT, circle.SquareOptions.SquareOptionsT, circle.ZerosLikeOptions.ZerosLikeOptionsT, circle.FillOptions.FillOptionsT, circle.BidirectionalSequenceLSTMOptions.BidirectionalSequenceLSTMOptionsT, circle.BidirectionalSequenceRNNOptions.BidirectionalSequenceRNNOptionsT, circle.UnidirectionalSequenceLSTMOptions.UnidirectionalSequenceLSTMOptionsT, circle.FloorModOptions.FloorModOptionsT, circle.RangeOptions.RangeOptionsT, circle.ResizeNearestNeighborOptions.ResizeNearestNeighborOptionsT, circle.LeakyReluOptions.LeakyReluOptionsT, circle.SquaredDifferenceOptions.SquaredDifferenceOptionsT, circle.MirrorPadOptions.MirrorPadOptionsT, circle.AbsOptions.AbsOptionsT, circle.SplitVOptions.SplitVOptionsT, circle.UniqueOptions.UniqueOptionsT, circle.ReverseV2Options.ReverseV2OptionsT, circle.AddNOptions.AddNOptionsT, circle.GatherNdOptions.GatherNdOptionsT, circle.CosOptions.CosOptionsT, circle.WhereOptions.WhereOptionsT, circle.RankOptions.RankOptionsT, circle.ReverseSequenceOptions.ReverseSequenceOptionsT, circle.MatrixDiagOptions.MatrixDiagOptionsT, circle.QuantizeOptions.QuantizeOptionsT, circle.MatrixSetDiagOptions.MatrixSetDiagOptionsT, circle.HardSwishOptions.HardSwishOptionsT, circle.IfOptions.IfOptionsT, circle.WhileOptions.WhileOptionsT, circle.DepthToSpaceOptions.DepthToSpaceOptionsT, circle.NonMaxSuppressionV4Options.NonMaxSuppressionV4OptionsT, circle.NonMaxSuppressionV5Options.NonMaxSuppressionV5OptionsT, circle.ScatterNdOptions.ScatterNdOptionsT, circle.SelectV2Options.SelectV2OptionsT, circle.DensifyOptions.DensifyOptionsT, circle.SegmentSumOptions.SegmentSumOptionsT, circle.BatchMatMulOptions.BatchMatMulOptionsT, circle.CumsumOptions.CumsumOptionsT, circle.CallOnceOptions.CallOnceOptionsT, circle.BroadcastToOptions.BroadcastToOptionsT, circle.Rfft2dOptions.Rfft2dOptionsT, circle.Conv3DOptions.Conv3DOptionsT, circle.HashtableOptions.HashtableOptionsT, circle.HashtableFindOptions.HashtableFindOptionsT, circle.HashtableImportOptions.HashtableImportOptionsT, circle.HashtableSizeOptions.HashtableSizeOptionsT, circle.VarHandleOptions.VarHandleOptionsT, circle.ReadVariableOptions.ReadVariableOptionsT, circle.AssignVariableOptions.AssignVariableOptionsT, circle.RandomOptions.RandomOptionsT, circle.BucketizeOptions.BucketizeOptionsT, circle.GeluOptions.GeluOptionsT, circle.DynamicUpdateSliceOptions.DynamicUpdateSliceOptionsT, circle.UnsortedSegmentProdOptions.UnsortedSegmentProdOptionsT, circle.UnsortedSegmentMaxOptions.UnsortedSegmentMaxOptionsT, circle.UnsortedSegmentMinOptions.UnsortedSegmentMinOptionsT, circle.UnsortedSegmentSumOptions.UnsortedSegmentSumOptionsT, circle.ATan2Options.ATan2OptionsT, circle.SignOptions.SignOptionsT, circle.BitcastOptions.BitcastOptionsT, circle.BitwiseXorOptions.BitwiseXorOptionsT, circle.RightShiftOptions.RightShiftOptionsT, circle.RoPEOptions.RoPEOptionsT, circle.RmsNormOptions.RmsNormOptionsT, circle.GRUOptions.GRUOptionsT, circle.BCQGatherOptions.BCQGatherOptionsT, circle.BCQFullyConnectedOptions.BCQFullyConnectedOptionsT, circle.InstanceNormOptions.InstanceNormOptionsT]
        self.customOptions = None  # type: List[int]
        self.customOptionsFormat = 0  # type: int
        self.mutatingVariableInputs = None  # type: List[bool]
        self.intermediates = None  # type: List[int]
        self.largeCustomOptionsOffset = 0  # type: int
        self.largeCustomOptionsSize = 0  # type: int
        self.builtinOptions2Type = 0  # type: int
        self.builtinOptions2 = None  # type: Union[None, circle.StablehloConcatenateOptions.StablehloConcatenateOptionsT, circle.StablehloBroadcastInDimOptions.StablehloBroadcastInDimOptionsT, circle.StablehloSliceOptions.StablehloSliceOptionsT, circle.StablehloConvolutionOptions.StablehloConvolutionOptionsT, circle.StablehloCustomCallOptions.StablehloCustomCallOptionsT, circle.StablehloReduceOptions.StablehloReduceOptionsT, circle.StablehloScatterOptions.StablehloScatterOptionsT, circle.StablehloCompareOptions.StablehloCompareOptionsT, circle.StablehloDynamicSliceOptions.StablehloDynamicSliceOptionsT, circle.StablehloPadOptions.StablehloPadOptionsT, circle.StablehloIotaOptions.StablehloIotaOptionsT, circle.StablehloDotGeneralOptions.StablehloDotGeneralOptionsT, circle.StablehloReduceWindowOptions.StablehloReduceWindowOptionsT, circle.StablehloSortOptions.StablehloSortOptionsT, circle.StablehloWhileOptions.StablehloWhileOptionsT, circle.StablehloGatherOptions.StablehloGatherOptionsT, circle.StablehloTransposeOptions.StablehloTransposeOptionsT, circle.DilateOptions.DilateOptionsT, circle.StablehloRngBitGeneratorOptions.StablehloRngBitGeneratorOptionsT, circle.ReduceWindowOptions.ReduceWindowOptionsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operator = Operator()
        operator.Init(buf, pos)
        return cls.InitFromObj(operator)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, operator):
        x = OperatorT()
        x._UnPack(operator)
        return x

    # OperatorT
    def _UnPack(self, operator):
        if operator is None:
            return
        self.opcodeIndex = operator.OpcodeIndex()
        if not operator.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(operator.InputsLength()):
                    self.inputs.append(operator.Inputs(i))
            else:
                self.inputs = operator.InputsAsNumpy()
        if not operator.OutputsIsNone():
            if np is None:
                self.outputs = []
                for i in range(operator.OutputsLength()):
                    self.outputs.append(operator.Outputs(i))
            else:
                self.outputs = operator.OutputsAsNumpy()
        self.builtinOptionsType = operator.BuiltinOptionsType()
        self.builtinOptions = circle.BuiltinOptions.BuiltinOptionsCreator(self.builtinOptionsType, operator.BuiltinOptions())
        if not operator.CustomOptionsIsNone():
            if np is None:
                self.customOptions = []
                for i in range(operator.CustomOptionsLength()):
                    self.customOptions.append(operator.CustomOptions(i))
            else:
                self.customOptions = operator.CustomOptionsAsNumpy()
        self.customOptionsFormat = operator.CustomOptionsFormat()
        if not operator.MutatingVariableInputsIsNone():
            if np is None:
                self.mutatingVariableInputs = []
                for i in range(operator.MutatingVariableInputsLength()):
                    self.mutatingVariableInputs.append(operator.MutatingVariableInputs(i))
            else:
                self.mutatingVariableInputs = operator.MutatingVariableInputsAsNumpy()
        if not operator.IntermediatesIsNone():
            if np is None:
                self.intermediates = []
                for i in range(operator.IntermediatesLength()):
                    self.intermediates.append(operator.Intermediates(i))
            else:
                self.intermediates = operator.IntermediatesAsNumpy()
        self.largeCustomOptionsOffset = operator.LargeCustomOptionsOffset()
        self.largeCustomOptionsSize = operator.LargeCustomOptionsSize()
        self.builtinOptions2Type = operator.BuiltinOptions2Type()
        self.builtinOptions2 = circle.BuiltinOptions2.BuiltinOptions2Creator(self.builtinOptions2Type, operator.BuiltinOptions2())

    # OperatorT
    def Pack(self, builder):
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                OperatorStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependInt32(self.inputs[i])
                inputs = builder.EndVector()
        if self.outputs is not None:
            if np is not None and type(self.outputs) is np.ndarray:
                outputs = builder.CreateNumpyVector(self.outputs)
            else:
                OperatorStartOutputsVector(builder, len(self.outputs))
                for i in reversed(range(len(self.outputs))):
                    builder.PrependInt32(self.outputs[i])
                outputs = builder.EndVector()
        if self.builtinOptions is not None:
            builtinOptions = self.builtinOptions.Pack(builder)
        if self.customOptions is not None:
            if np is not None and type(self.customOptions) is np.ndarray:
                customOptions = builder.CreateNumpyVector(self.customOptions)
            else:
                OperatorStartCustomOptionsVector(builder, len(self.customOptions))
                for i in reversed(range(len(self.customOptions))):
                    builder.PrependUint8(self.customOptions[i])
                customOptions = builder.EndVector()
        if self.mutatingVariableInputs is not None:
            if np is not None and type(self.mutatingVariableInputs) is np.ndarray:
                mutatingVariableInputs = builder.CreateNumpyVector(self.mutatingVariableInputs)
            else:
                OperatorStartMutatingVariableInputsVector(builder, len(self.mutatingVariableInputs))
                for i in reversed(range(len(self.mutatingVariableInputs))):
                    builder.PrependBool(self.mutatingVariableInputs[i])
                mutatingVariableInputs = builder.EndVector()
        if self.intermediates is not None:
            if np is not None and type(self.intermediates) is np.ndarray:
                intermediates = builder.CreateNumpyVector(self.intermediates)
            else:
                OperatorStartIntermediatesVector(builder, len(self.intermediates))
                for i in reversed(range(len(self.intermediates))):
                    builder.PrependInt32(self.intermediates[i])
                intermediates = builder.EndVector()
        if self.builtinOptions2 is not None:
            builtinOptions2 = self.builtinOptions2.Pack(builder)
        OperatorStart(builder)
        OperatorAddOpcodeIndex(builder, self.opcodeIndex)
        if self.inputs is not None:
            OperatorAddInputs(builder, inputs)
        if self.outputs is not None:
            OperatorAddOutputs(builder, outputs)
        OperatorAddBuiltinOptionsType(builder, self.builtinOptionsType)
        if self.builtinOptions is not None:
            OperatorAddBuiltinOptions(builder, builtinOptions)
        if self.customOptions is not None:
            OperatorAddCustomOptions(builder, customOptions)
        OperatorAddCustomOptionsFormat(builder, self.customOptionsFormat)
        if self.mutatingVariableInputs is not None:
            OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs)
        if self.intermediates is not None:
            OperatorAddIntermediates(builder, intermediates)
        OperatorAddLargeCustomOptionsOffset(builder, self.largeCustomOptionsOffset)
        OperatorAddLargeCustomOptionsSize(builder, self.largeCustomOptionsSize)
        OperatorAddBuiltinOptions2Type(builder, self.builtinOptions2Type)
        if self.builtinOptions2 is not None:
            OperatorAddBuiltinOptions2(builder, builtinOptions2)
        operator = OperatorEnd(builder)
        return operator
