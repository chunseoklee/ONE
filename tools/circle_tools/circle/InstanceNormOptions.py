# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InstanceNormOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InstanceNormOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstanceNormOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def InstanceNormOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # InstanceNormOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InstanceNormOptions
    def Epsilon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # InstanceNormOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def InstanceNormOptionsStart(builder):
    builder.StartObject(2)

def Start(builder):
    InstanceNormOptionsStart(builder)

def InstanceNormOptionsAddEpsilon(builder, epsilon):
    builder.PrependFloat32Slot(0, epsilon, 0.0)

def AddEpsilon(builder, epsilon):
    InstanceNormOptionsAddEpsilon(builder, epsilon)

def InstanceNormOptionsAddFusedActivationFunction(builder, fusedActivationFunction):
    builder.PrependInt8Slot(1, fusedActivationFunction, 0)

def AddFusedActivationFunction(builder, fusedActivationFunction):
    InstanceNormOptionsAddFusedActivationFunction(builder, fusedActivationFunction)

def InstanceNormOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return InstanceNormOptionsEnd(builder)


class InstanceNormOptionsT(object):

    # InstanceNormOptionsT
    def __init__(self):
        self.epsilon = 0.0  # type: float
        self.fusedActivationFunction = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        instanceNormOptions = InstanceNormOptions()
        instanceNormOptions.Init(buf, pos)
        return cls.InitFromObj(instanceNormOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, instanceNormOptions):
        x = InstanceNormOptionsT()
        x._UnPack(instanceNormOptions)
        return x

    # InstanceNormOptionsT
    def _UnPack(self, instanceNormOptions):
        if instanceNormOptions is None:
            return
        self.epsilon = instanceNormOptions.Epsilon()
        self.fusedActivationFunction = instanceNormOptions.FusedActivationFunction()

    # InstanceNormOptionsT
    def Pack(self, builder):
        InstanceNormOptionsStart(builder)
        InstanceNormOptionsAddEpsilon(builder, self.epsilon)
        InstanceNormOptionsAddFusedActivationFunction(builder, self.fusedActivationFunction)
        instanceNormOptions = InstanceNormOptionsEnd(builder)
        return instanceNormOptions
