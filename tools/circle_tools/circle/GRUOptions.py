# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GRUOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GRUOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGRUOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GRUOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # GRUOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GRUOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # GRUOptions
    def ReturnSequences(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GRUOptions
    def TimeMajor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def GRUOptionsStart(builder):
    builder.StartObject(3)

def Start(builder):
    GRUOptionsStart(builder)

def GRUOptionsAddFusedActivationFunction(builder, fusedActivationFunction):
    builder.PrependInt8Slot(0, fusedActivationFunction, 0)

def AddFusedActivationFunction(builder, fusedActivationFunction):
    GRUOptionsAddFusedActivationFunction(builder, fusedActivationFunction)

def GRUOptionsAddReturnSequences(builder, returnSequences):
    builder.PrependBoolSlot(1, returnSequences, 0)

def AddReturnSequences(builder, returnSequences):
    GRUOptionsAddReturnSequences(builder, returnSequences)

def GRUOptionsAddTimeMajor(builder, timeMajor):
    builder.PrependBoolSlot(2, timeMajor, 0)

def AddTimeMajor(builder, timeMajor):
    GRUOptionsAddTimeMajor(builder, timeMajor)

def GRUOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return GRUOptionsEnd(builder)


class GRUOptionsT(object):

    # GRUOptionsT
    def __init__(self):
        self.fusedActivationFunction = 0  # type: int
        self.returnSequences = False  # type: bool
        self.timeMajor = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gruoptions = GRUOptions()
        gruoptions.Init(buf, pos)
        return cls.InitFromObj(gruoptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, gruoptions):
        x = GRUOptionsT()
        x._UnPack(gruoptions)
        return x

    # GRUOptionsT
    def _UnPack(self, gruoptions):
        if gruoptions is None:
            return
        self.fusedActivationFunction = gruoptions.FusedActivationFunction()
        self.returnSequences = gruoptions.ReturnSequences()
        self.timeMajor = gruoptions.TimeMajor()

    # GRUOptionsT
    def Pack(self, builder):
        GRUOptionsStart(builder)
        GRUOptionsAddFusedActivationFunction(builder, self.fusedActivationFunction)
        GRUOptionsAddReturnSequences(builder, self.returnSequences)
        GRUOptionsAddTimeMajor(builder, self.timeMajor)
        gruoptions = GRUOptionsEnd(builder)
        return gruoptions
